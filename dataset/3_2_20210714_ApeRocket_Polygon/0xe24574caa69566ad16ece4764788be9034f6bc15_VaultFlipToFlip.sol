{{
  "language": "Solidity",
  "sources": {
    "./contracts/VaultFlipToFlip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport {PoolConstant} from \"../libraries/PoolConstant.sol\";\nimport \"../interfaces/IApeRouter02.sol\";\nimport \"../interfaces/IApePair.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IApeChef.sol\";\nimport \"../interfaces/ISpaceMinter.sol\";\nimport \"./Zap.sol\";\n\nimport \"./VaultController.sol\";\n\ncontract VaultFlipToFlip is VaultController, IStrategy {\n    using SafeBEP20 for IBEP20;\n    using SafeMath for uint256;\n\n    IApeRouter02 private constant ROUTER =\n        IApeRouter02(0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607);\n    IBEP20 private constant BANANA =\n        IBEP20(0x5d47bAbA0d66083C52009271faF3F50DCc01023C);\n    IApeChef private APE_MASTER_CHEF;\n\n    PoolConstant.PoolTypes public constant override poolType =\n        PoolConstant.PoolTypes.FlipToFlip;\n\n    Zap public zap;\n    uint256 private constant DUST = 1000;\n\n    uint256 public override pid;\n\n    address private _token0;\n    address private _token1;\n\n    uint256 public totalShares;\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _principal;\n    mapping(address => uint256) private _depositedAt;\n\n    uint256 public bananaHarvested;\n\n    modifier updateBananaHarvested {\n        uint256 before = BANANA.balanceOf(address(this));\n        _;\n        uint256 _after = BANANA.balanceOf(address(this));\n        bananaHarvested = bananaHarvested.add(_after).sub(before);\n    }\n\n    function initialize(\n        uint256 _pid,\n        IBEP20 _token,\n        address payable _zap\n    ) external initializer {\n        __VaultController_init(IBEP20(_token));\n        APE_MASTER_CHEF = IApeChef(0x54aff400858Dcac39797a81894D9920f16972D1D);\n        setFlipToken(address(_token));\n        pid = _pid;\n        zap = Zap(_zap);\n\n        BANANA.approve(address(ROUTER), uint256(~0));\n        BANANA.approve(_zap, uint256(~0));\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return totalShares;\n    }\n\n    function balance() public view override returns (uint256 amount) {\n        (amount, ) = APE_MASTER_CHEF.userInfo(pid, address(this));\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (totalShares == 0) return 0;\n        return balance().mul(sharesOf(account)).div(totalShares);\n    }\n\n    function withdrawableBalanceOf(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return balanceOf(account);\n    }\n\n    function sharesOf(address account) public view override returns (uint256) {\n        return _shares[account];\n    }\n\n    function principalOf(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _principal[account];\n    }\n\n    function earned(address account) public view override returns (uint256) {\n        if (balanceOf(account) >= principalOf(account) + DUST) {\n            return balanceOf(account).sub(principalOf(account));\n        } else {\n            return 0;\n        }\n    }\n\n    function depositedAt(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _depositedAt[account];\n    }\n\n    function rewardsToken() external view override returns (address) {\n        return address(_stakingToken);\n    }\n\n    function priceShare() external view override returns (uint256) {\n        if (totalShares == 0) return 1e18;\n        return balance().mul(1e18).div(totalShares);\n    }\n\n    function deposit(uint256 _amount) public override {\n        _depositTo(_amount, msg.sender);\n    }\n\n    function depositAll() external override {\n        deposit(_stakingToken.balanceOf(msg.sender));\n    }\n\n    function withdrawAll() external override {\n        uint256 amount = balanceOf(msg.sender);\n        uint256 principal = principalOf(msg.sender);\n        uint256 depositTimestamp = _depositedAt[msg.sender];\n\n        totalShares = totalShares.sub(_shares[msg.sender]);\n        delete _shares[msg.sender];\n        delete _principal[msg.sender];\n        delete _depositedAt[msg.sender];\n\n        amount = _withdrawTokenWithCorrection(amount);\n        uint256 profit = amount > principal ? amount.sub(principal) : 0;\n\n        uint256 withdrawalFee = canMint()\n            ? _minter.withdrawalFee(principal, depositTimestamp)\n            : 0;\n        uint256 performanceFee = canMint() ? _minter.performanceFee(profit) : 0;\n        if (withdrawalFee.add(performanceFee) > DUST) {\n            _minter.mintFor(\n                address(_stakingToken),\n                withdrawalFee,\n                performanceFee,\n                msg.sender,\n                depositTimestamp\n            );\n\n            if (performanceFee > 0) {\n                emit ProfitPaid(msg.sender, profit, performanceFee);\n            }\n            amount = amount.sub(withdrawalFee).sub(performanceFee);\n        }\n\n        _stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount, withdrawalFee);\n    }\n\n    function harvest() external override onlyKeeper {\n        _harvest();\n\n        uint256 before = _stakingToken.balanceOf(address(this));\n        zap.zapInToken(\n            address(BANANA),\n            bananaHarvested,\n            address(_stakingToken)\n        );\n        uint256 harvested = _stakingToken.balanceOf(address(this)).sub(before);\n\n        APE_MASTER_CHEF.deposit(pid, harvested, address(this));\n        emit Harvested(harvested);\n\n        bananaHarvested = 0;\n    }\n\n    function _harvest() private updateBananaHarvested {\n        APE_MASTER_CHEF.harvest(pid, address(this));\n    }\n\n    function withdraw(uint256 shares) external override onlyWhitelisted {\n        uint256 amount = balance().mul(shares).div(totalShares);\n        totalShares = totalShares.sub(shares);\n        _shares[msg.sender] = _shares[msg.sender].sub(shares);\n\n        amount = _withdrawTokenWithCorrection(amount);\n        _stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount, 0);\n    }\n\n    // @dev underlying only + withdrawal fee + no perf fee\n    function withdrawUnderlying(uint256 _amount) external {\n        uint256 amount = Math.min(_amount, _principal[msg.sender]);\n        uint256 shares = Math.min(\n            amount.mul(totalShares).div(balance()),\n            _shares[msg.sender]\n        );\n        totalShares = totalShares.sub(shares);\n        _shares[msg.sender] = _shares[msg.sender].sub(shares);\n        _principal[msg.sender] = _principal[msg.sender].sub(amount);\n\n        amount = _withdrawTokenWithCorrection(amount);\n        uint256 depositTimestamp = _depositedAt[msg.sender];\n        uint256 withdrawalFee = canMint()\n            ? _minter.withdrawalFee(amount, depositTimestamp)\n            : 0;\n        if (withdrawalFee > DUST) {\n            _minter.mintFor(\n                address(_stakingToken),\n                withdrawalFee,\n                0,\n                msg.sender,\n                depositTimestamp\n            );\n            amount = amount.sub(withdrawalFee);\n        }\n\n        _stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount, withdrawalFee);\n    }\n\n    // @dev profits only (underlying + space) + no withdraw fee + perf fee\n    function getReward() external override {\n        uint256 amount = earned(msg.sender);\n        uint256 shares = Math.min(\n            amount.mul(totalShares).div(balance()),\n            _shares[msg.sender]\n        );\n        totalShares = totalShares.sub(shares);\n        _shares[msg.sender] = _shares[msg.sender].sub(shares);\n        _cleanupIfDustShares();\n\n        amount = _withdrawTokenWithCorrection(amount);\n        uint256 depositTimestamp = _depositedAt[msg.sender];\n        uint256 performanceFee = canMint() ? _minter.performanceFee(amount) : 0;\n        if (performanceFee > DUST) {\n            _minter.mintFor(\n                address(_stakingToken),\n                0,\n                performanceFee,\n                msg.sender,\n                depositTimestamp\n            );\n            amount = amount.sub(performanceFee);\n        }\n\n        _stakingToken.safeTransfer(msg.sender, amount);\n        emit ProfitPaid(msg.sender, amount, performanceFee);\n    }\n\n    // Private functions\n    function setFlipToken(address _token) private {\n        _token0 = IApePair(_token).token0();\n        _token1 = IApePair(_token).token1();\n\n        _stakingToken.safeApprove(address(APE_MASTER_CHEF), uint256(~0));\n        IBEP20(_token0).safeApprove(address(ROUTER), uint256(~0));\n        IBEP20(_token1).safeApprove(address(ROUTER), uint256(~0));\n    }\n\n    function _depositTo(uint256 _amount, address _to)\n        private\n        notPaused\n        updateBananaHarvested\n    {\n        uint256 _pool = balance();\n        uint256 _before = _stakingToken.balanceOf(address(this));\n        _stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = _stakingToken.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalShares == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalShares)).div(_pool);\n        }\n\n        totalShares = totalShares.add(shares);\n        _shares[_to] = _shares[_to].add(shares);\n        _principal[_to] = _principal[_to].add(_amount);\n        _depositedAt[_to] = block.timestamp;\n\n        APE_MASTER_CHEF.deposit(pid, _amount, address(this));\n        emit Deposited(_to, _amount);\n    }\n\n    function _withdrawTokenWithCorrection(uint256 amount)\n        private\n        updateBananaHarvested\n        returns (uint256)\n    {\n        uint256 before = _stakingToken.balanceOf(address(this));\n        APE_MASTER_CHEF.withdraw(pid, amount, address(this));\n        return _stakingToken.balanceOf(address(this)).sub(before);\n    }\n\n    function _cleanupIfDustShares() private {\n        uint256 shares = _shares[msg.sender];\n        if (shares > 0 && shares < DUST) {\n            totalShares = totalShares.sub(shares);\n            delete _shares[msg.sender];\n        }\n    }\n\n    // Emergency only\n    // @dev stakingToken must not remain balance in this contract. So dev should salvage staking token transferred by mistake.\n    function recoverToken(address token, uint256 amount)\n        external\n        override\n        onlyOwner\n    {\n        if (token == address(BANANA)) {\n            uint256 bananaBalance = BANANA.balanceOf(address(this));\n            require(\n                amount <= bananaBalance.sub(bananaHarvested),\n                \"VaultFlipToFlip: cannot recover lp's harvested banana\"\n            );\n        }\n\n        IBEP20(token).safeTransfer(owner(), amount);\n        emit Recovered(token, amount);\n    }\n\n    function stakeTo(uint256 amount, address account) external override {}\n}\n"
    },
    "./libraries/PoolConstant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nlibrary PoolConstant {\n    enum PoolTypes {\n        SpaceStake, // no perf fee\n        BananaStake,\n        FlipToFlip,\n        FlipToBanana,\n        Space, // no perf fee\n        SpaceETH,\n        SpaceToSpace\n    }\n\n    struct PoolInfoBSC {\n        address pool;\n        uint256 balance;\n        uint256 principal;\n        uint256 available;\n        uint256 tvl;\n        uint256 utilized;\n        uint256 liquidity;\n        uint256 pBASE;\n        uint256 pSPACE;\n        uint256 depositedAt;\n        uint256 feeDuration;\n        uint256 feePercentage;\n    }\n}\n"
    },
    "./interfaces/IApeRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport \"./IApeRouter01.sol\";\n\ninterface IApeRouter02 is IApeRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "./interfaces/IApeRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ninterface IApeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "./interfaces/IApePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ninterface IApePair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "./interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libraries/PoolConstant.sol\";\nimport \"./IVaultController.sol\";\n\ninterface IStrategy is IVaultController {\n    function deposit(uint256 _amount) external;\n\n    function depositAll() external;\n\n    function withdraw(uint256 _amount) external; /// SPACE STAKING POOL ONLY\n\n    function withdrawAll() external;\n\n    function getReward() external; // SPACE STAKING POOL ONLY\n\n    function harvest() external;\n\n    function stakeTo(uint256 amount, address account) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balance() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function sharesOf(address account) external view returns (uint256);\n\n    function principalOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function withdrawableBalanceOf(address account)\n        external\n        view\n        returns (uint256); /// SPACE STAKING POOL ONLY\n\n    function priceShare() external view returns (uint256);\n\n    /** ========== Strategy Information ========== */\n\n    function pid() external view returns (uint256);\n\n    function poolType() external view returns (PoolConstant.PoolTypes);\n\n    function depositedAt(address account) external view returns (uint256);\n\n    function rewardsToken() external view returns (address);\n\n    event Deposited(address indexed user, uint256 amount);\n    event Withdrawn(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalFee\n    );\n    event ProfitPaid(\n        address indexed user,\n        uint256 profit,\n        uint256 performanceFee\n    );\n    event SpacePaid(\n        address indexed user,\n        uint256 profit,\n        uint256 performanceFee\n    );\n    event Harvested(uint256 profit);\n}\n"
    },
    "./interfaces/IVaultController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface IVaultController {\n    function minter() external view returns (address);\n\n    function spaceChef() external view returns (address);\n\n    function stakingToken() external view returns (address);\n}\n"
    },
    "./interfaces/IApeChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\ninterface IApeChef {\n    function poolInfo(uint256 _pid)\n        external\n        view\n        returns (\n            uint128,\n            uint64,\n            uint64\n        );\n\n    function lpToken(uint256 _pid) external view returns (address);\n\n    function userInfo(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256, uint256);\n\n    function pendingBanana(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256);\n\n    function bananaPerSecond() external view returns (uint256);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function emergencyWithdraw(uint256 pid, address to) external;\n\n    function harvest(uint256 pid, address to) external;\n\n    function withdraw(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n\n    function withdrawAndHarvest(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n\n    function deposit(\n        uint256 pid,\n        uint256 amount,\n        address to\n    ) external;\n}\n"
    },
    "./interfaces/ISpaceMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\ninterface ISpaceMinter {\n    function isMinter(address) external view returns (bool);\n\n    function amountSpaceToMint(uint256 bnbProfit)\n        external\n        view\n        returns (uint256);\n\n    function withdrawalFee(uint256 amount, uint256 depositedAt)\n        external\n        view\n        returns (uint256);\n\n    function performanceFee(uint256 profit) external view returns (uint256);\n\n    function mintFor(\n        address flip,\n        uint256 withdrawalFeeAmount,\n        uint256 performanceFeeAmount,\n        address dest,\n        uint256 depositedAt\n    ) external payable;\n\n    function amountToMintPerProfit() external view returns (uint256);\n\n    function withdrawalFeeFreePeriod() external view returns (uint256);\n\n    function withdrawalFeeRate() external view returns (uint256);\n\n    function updateAccessToMint(address minter, bool canMint) external;\n\n    function mint(address to, uint256 amount) external;\n\n    function safeSpaceTransfer(address to, uint256 amount) external;\n\n    function mintGov(uint256 amount) external;\n\n    function mintForSpaceLauncher(uint256 amount, address launcher) external;\n}\n"
    },
    "./contracts/Zap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../libraries/SafeBEP20.sol\";\nimport \"../interfaces/IApePair.sol\";\nimport \"../interfaces/IApeRouter02.sol\";\nimport \"../interfaces/IZap.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract Zap is IZap, OwnableUpgradeable {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    address private constant SPACE = 0xD016cAAe879c42cB0D74BB1A265021bf980A7E96;\n    address private constant BANANA =\n        0x5d47bAbA0d66083C52009271faF3F50DCc01023C;\n    address private constant WMATIC =\n        0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n\n    address private constant BNB = 0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F;\n    address private constant DAI = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\n    address private constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\n    address private constant USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n    address private constant BTC = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\n    address private constant ETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\n\n    IApeRouter02 private constant ROUTER =\n        IApeRouter02(0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607);\n\n    mapping(address => bool) private notFlip;\n    mapping(address => address) private routePairAddresses;\n    address[] public tokens;\n\n    function initialize() external initializer {\n        __Ownable_init();\n        require(owner() != address(0), \"Zap: owner must be set\");\n\n        setNotFlip(WMATIC);\n        setNotFlip(SPACE);\n        setNotFlip(DAI);\n        setNotFlip(USDC);\n        setNotFlip(USDT);\n        setNotFlip(BTC);\n        setNotFlip(ETH);\n        setNotFlip(BANANA);\n        setNotFlip(BNB);\n\n        setRoutePairAddress(USDC, DAI);\n        setRoutePairAddress(SPACE, ETH);\n    }\n\n    receive() external payable {}\n\n    /* ========== View Functions ========== */\n\n    function isFlip(address _address) public view returns (bool) {\n        return !notFlip[_address];\n    }\n\n    function routePair(address _address) external view returns (address) {\n        return routePairAddresses[_address];\n    }\n\n    /* ========== External Functions ========== */\n\n    function zapInToken(\n        address _from,\n        uint256 amount,\n        address _to\n    ) external override {\n        IBEP20(_from).safeTransferFrom(msg.sender, address(this), amount);\n        _approveTokenIfNeeded(_from);\n\n        if (isFlip(_to)) {\n            IApePair pair = IApePair(_to);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            if (_from == token0 || _from == token1) {\n                // swap half amount for other\n                address other = _from == token0 ? token1 : token0;\n                _approveTokenIfNeeded(other);\n                uint256 sellAmount = amount.div(2);\n                uint256 otherAmount = _swap(\n                    _from,\n                    sellAmount,\n                    other,\n                    address(this)\n                );\n                ROUTER.addLiquidity(\n                    _from,\n                    other,\n                    amount.sub(sellAmount),\n                    otherAmount,\n                    0,\n                    0,\n                    msg.sender,\n                    block.timestamp\n                );\n            } else {\n                uint256 maticAmount = _swapTokenForMATIC(\n                    _from,\n                    amount,\n                    address(this)\n                );\n                _swapMATICToFlip(_to, maticAmount, msg.sender);\n            }\n        } else {\n            _swap(_from, amount, _to, msg.sender);\n        }\n    }\n\n    function zapIn(address _to) external payable override {\n        _swapMATICToFlip(_to, msg.value, msg.sender);\n    }\n\n    function zapOut(address _from, uint256 amount) external override {\n        IBEP20(_from).safeTransferFrom(msg.sender, address(this), amount);\n        _approveTokenIfNeeded(_from);\n\n        if (!isFlip(_from)) {\n            _swapTokenForMATIC(_from, amount, msg.sender);\n        } else {\n            IApePair pair = IApePair(_from);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            if (token0 == WMATIC || token1 == WMATIC) {\n                ROUTER.removeLiquidityETH(\n                    token0 != WMATIC ? token0 : token1,\n                    amount,\n                    0,\n                    0,\n                    msg.sender,\n                    block.timestamp\n                );\n            } else {\n                ROUTER.removeLiquidity(\n                    token0,\n                    token1,\n                    amount,\n                    0,\n                    0,\n                    msg.sender,\n                    block.timestamp\n                );\n            }\n        }\n    }\n\n    /* ========== Private Functions ========== */\n\n    function _approveTokenIfNeeded(address token) private {\n        if (IBEP20(token).allowance(address(this), address(ROUTER)) == 0) {\n            IBEP20(token).safeApprove(address(ROUTER), uint256(-1));\n        }\n    }\n\n    function _swapMATICToFlip(\n        address flip,\n        uint256 amount,\n        address receiver\n    ) private {\n        if (!isFlip(flip)) {\n            _swapMATICForToken(flip, amount, receiver);\n        } else {\n            // flip\n            IApePair pair = IApePair(flip);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            if (token0 == WMATIC || token1 == WMATIC) {\n                address token = token0 == WMATIC ? token1 : token0;\n                uint256 swapValue = amount.div(2);\n                uint256 tokenAmount = _swapMATICForToken(\n                    token,\n                    swapValue,\n                    address(this)\n                );\n\n                _approveTokenIfNeeded(token);\n                ROUTER.addLiquidityETH{value: amount.sub(swapValue)}(\n                    token,\n                    tokenAmount,\n                    0,\n                    0,\n                    receiver,\n                    block.timestamp\n                );\n            } else {\n                uint256 swapValue = amount.div(2);\n                uint256 token0Amount = _swapMATICForToken(\n                    token0,\n                    swapValue,\n                    address(this)\n                );\n                uint256 token1Amount = _swapMATICForToken(\n                    token1,\n                    amount.sub(swapValue),\n                    address(this)\n                );\n\n                _approveTokenIfNeeded(token0);\n                _approveTokenIfNeeded(token1);\n                ROUTER.addLiquidity(\n                    token0,\n                    token1,\n                    token0Amount,\n                    token1Amount,\n                    0,\n                    0,\n                    receiver,\n                    block.timestamp\n                );\n            }\n        }\n    }\n\n    function _swapMATICForToken(\n        address token,\n        uint256 value,\n        address receiver\n    ) private returns (uint256) {\n        address[] memory path;\n\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = WMATIC;\n            path[1] = routePairAddresses[token];\n            path[2] = token;\n        } else {\n            path = new address[](2);\n            path[0] = WMATIC;\n            path[1] = token;\n        }\n\n        uint256[] memory amounts = ROUTER.swapExactETHForTokens{value: value}(\n            0,\n            path,\n            receiver,\n            block.timestamp\n        );\n        return amounts[amounts.length - 1];\n    }\n\n    function _swapTokenForMATIC(\n        address token,\n        uint256 amount,\n        address receiver\n    ) private returns (uint256) {\n        address[] memory path;\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = token;\n            path[1] = routePairAddresses[token];\n            path[2] = WMATIC;\n        } else {\n            path = new address[](2);\n            path[0] = token;\n            path[1] = WMATIC;\n        }\n        uint256[] memory amounts = ROUTER.swapExactTokensForETH(\n            amount,\n            0,\n            path,\n            receiver,\n            block.timestamp\n        );\n        return amounts[amounts.length - 1];\n    }\n\n    function _swap(\n        address _from,\n        uint256 amount,\n        address _to,\n        address receiver\n    ) private returns (uint256) {\n        address intermediate = routePairAddresses[_from];\n        if (intermediate == address(0)) {\n            intermediate = routePairAddresses[_to];\n        }\n\n        address[] memory path;\n        if (intermediate != address(0) && (_from == WMATIC || _to == WMATIC)) {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = _to;\n        } else if (\n            intermediate != address(0) &&\n            (_from == intermediate || _to == intermediate)\n        ) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else if (\n            intermediate != address(0) &&\n            routePairAddresses[_from] == routePairAddresses[_to]\n        ) {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = _to;\n        } else if (\n            routePairAddresses[_from] != address(0) &&\n            routePairAddresses[_to] != address(0) &&\n            routePairAddresses[_from] != routePairAddresses[_to]\n        ) {\n            path = new address[](5);\n            path[0] = _from;\n            path[1] = routePairAddresses[_from];\n            path[2] = WMATIC;\n            path[3] = routePairAddresses[_to];\n            path[4] = _to;\n        } else if (\n            intermediate != address(0) &&\n            routePairAddresses[_from] != address(0)\n        ) {\n            path = new address[](4);\n            path[0] = _from;\n            path[1] = intermediate;\n            path[2] = WMATIC;\n            path[3] = _to;\n        } else if (\n            intermediate != address(0) && routePairAddresses[_to] != address(0)\n        ) {\n            path = new address[](4);\n            path[0] = _from;\n            path[1] = WMATIC;\n            path[2] = intermediate;\n            path[3] = _to;\n        } else if (_from == WMATIC || _to == WMATIC) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = WMATIC;\n            path[2] = _to;\n        }\n\n        uint256[] memory amounts = ROUTER.swapExactTokensForTokens(\n            amount,\n            0,\n            path,\n            receiver,\n            block.timestamp\n        );\n        return amounts[amounts.length - 1];\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setRoutePairAddress(address asset, address route)\n        public\n        onlyOwner\n    {\n        routePairAddresses[asset] = route;\n    }\n\n    function setNotFlip(address token) public onlyOwner {\n        bool needPush = notFlip[token] == false;\n        notFlip[token] = true;\n        if (needPush) {\n            tokens.push(token);\n        }\n    }\n\n    function removeToken(uint256 i) external onlyOwner {\n        address token = tokens[i];\n        notFlip[token] = false;\n        tokens[i] = tokens[tokens.length - 1];\n        tokens.pop();\n    }\n\n    function sweep() external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            if (token == address(0)) continue;\n            uint256 amount = IBEP20(token).balanceOf(address(this));\n            if (amount > 0) {\n                _swapTokenForMATIC(token, amount, owner());\n            }\n        }\n    }\n\n    function withdraw(address token) external onlyOwner {\n        if (token == address(0)) {\n            payable(owner()).transfer(address(this).balance);\n            return;\n        }\n\n        IBEP20(token).transfer(owner(), IBEP20(token).balanceOf(address(this)));\n    }\n}\n"
    },
    "./libraries/SafeBEP20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../interfaces/IBEP20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeBEP20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeBEP20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeBEP20: BEP20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
    },
    "./interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.4;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "./interfaces/IZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\ninterface IZap {\n    function zapOut(address _from, uint256 amount) external;\n\n    function zapIn(address _to) external payable;\n\n    function zapInToken(\n        address _from,\n        uint256 amount,\n        address _to\n    ) external;\n}\n"
    },
    "./contracts/VaultController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../libraries/SafeBEP20.sol\";\nimport \"../libraries/BEP20.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IApeRouter02.sol\";\nimport \"../interfaces/IApePair.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/ISpaceMinter.sol\";\nimport \"../interfaces/ISpaceChef.sol\";\nimport \"../libraries/PausableUpgradeable.sol\";\nimport \"../libraries/WhitelistUpgradeable.sol\";\n\nabstract contract VaultController is\n    IVaultController,\n    PausableUpgradeable,\n    WhitelistUpgradeable\n{\n    using SafeBEP20 for IBEP20;\n\n    BEP20 private constant SPACE =\n        BEP20(0xD016cAAe879c42cB0D74BB1A265021bf980A7E96);\n\n    address public keeper;\n\n    IBEP20 internal _stakingToken;\n    ISpaceMinter internal _minter;\n    ISpaceChef internal _spaceChef;\n\n    /* ========== VARIABLE GAP ========== */\n\n    uint256[49] private __gap;\n\n    event Recovered(address token, uint256 amount);\n\n    modifier onlyKeeper {\n        require(\n            msg.sender == keeper || msg.sender == owner(),\n            \"VaultController: caller is not the owner or keeper\"\n        );\n        _;\n    }\n\n    function __VaultController_init(IBEP20 token) internal initializer {\n        __PausableUpgradeable_init();\n        __WhitelistUpgradeable_init();\n\n        keeper = msg.sender;\n        _stakingToken = token;\n    }\n\n    function minter() external view override returns (address) {\n        return canMint() ? address(_minter) : address(0);\n    }\n\n    function canMint() internal view returns (bool) {\n        return\n            address(_minter) != address(0) && _minter.isMinter(address(this));\n    }\n\n    function spaceChef() external view override returns (address) {\n        return address(_spaceChef);\n    }\n\n    function stakingToken() external view override returns (address) {\n        return address(_stakingToken);\n    }\n\n    // Only owner\n    function setKeeper(address _keeper) external onlyKeeper {\n        require(\n            _keeper != address(0),\n            \"VaultController: invalid keeper address\"\n        );\n        keeper = _keeper;\n    }\n\n    function setMinter(address newMinter) public virtual onlyOwner {\n        // can zero\n        _minter = ISpaceMinter(newMinter);\n        if (newMinter != address(0)) {\n            require(\n                newMinter == SPACE.getOwner(),\n                \"VaultController: not space minter\"\n            );\n            _stakingToken.safeApprove(newMinter, 0);\n            _stakingToken.safeApprove(newMinter, uint256(~0));\n        }\n    }\n\n    function setSpaceChef(ISpaceChef newSpaceChef) public virtual onlyOwner {\n        require(\n            address(_spaceChef) == address(0),\n            \"VaultController: setSpaceChef only once\"\n        );\n        _spaceChef = newSpaceChef;\n    }\n\n    // Emergency only\n    function recoverToken(address _token, uint256 amount)\n        external\n        virtual\n        onlyOwner\n    {\n        require(\n            _token != address(_stakingToken),\n            \"VaultController: cannot recover underlying token\"\n        );\n        IBEP20(_token).safeTransfer(owner(), amount);\n\n        emit Recovered(_token, amount);\n    }\n}\n"
    },
    "./libraries/BEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.0;\n\nimport \"../interfaces/IBEP20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view override returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     */\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"BEP20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"BEP20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"BEP20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"BEP20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(\n                amount,\n                \"BEP20: burn amount exceeds allowance\"\n            )\n        );\n    }\n}\n"
    },
    "./interfaces/ISpaceChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.12;\npragma experimental ABIEncoderV2;\n\ninterface ISpaceChef {\n    struct UserInfo {\n        uint256 balance;\n        uint256 pending;\n        uint256 rewardPaid;\n    }\n\n    struct VaultInfo {\n        address token;\n        uint256 allocPoint;\n        uint256 lastRewardBlock;\n        uint256 accSpacePerShare;\n    }\n\n    function spacePerBlock() external view returns (uint256);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function vaultInfoOf(address vault)\n        external\n        view\n        returns (VaultInfo memory);\n\n    function vaultUserInfoOf(address vault, address user)\n        external\n        view\n        returns (UserInfo memory);\n\n    function pendingSpace(address vault, address user)\n        external\n        view\n        returns (uint256);\n\n    function notifyDeposited(address user, uint256 amount) external;\n\n    function notifyWithdrawn(address user, uint256 amount) external;\n\n    function safeSpaceTransfer(address user) external returns (uint256);\n}\n"
    },
    "./libraries/PausableUpgradeable.sol": {
      "content": "/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract PausableUpgradeable is OwnableUpgradeable {\n    uint256 public lastPauseTime;\n    bool public paused;\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(\n            !paused,\n            \"PausableUpgradeable: cannot be performed while the contract is paused\"\n        );\n        _;\n    }\n\n    function __PausableUpgradeable_init() internal initializer {\n        __Ownable_init();\n        require(\n            owner() != address(0),\n            \"PausableUpgradeable: owner must be set\"\n        );\n    }\n\n    function setPaused(bool _paused) external onlyOwner {\n        if (_paused == paused) {\n            return;\n        }\n\n        paused = _paused;\n        if (paused) {\n            lastPauseTime = now;\n        }\n\n        emit PauseChanged(paused);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "./libraries/WhitelistUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract WhitelistUpgradeable is OwnableUpgradeable {\n    mapping(address => bool) private _whitelist;\n    bool private _disable; // default - false means whitelist feature is working on. if true no more use of whitelist\n\n    event Whitelisted(address indexed _address, bool whitelist);\n    event EnableWhitelist();\n    event DisableWhitelist();\n\n    modifier onlyWhitelisted {\n        require(\n            _disable || _whitelist[msg.sender],\n            \"Whitelist: caller is not on the whitelist\"\n        );\n        _;\n    }\n\n    function __WhitelistUpgradeable_init() internal initializer {\n        __Ownable_init();\n    }\n\n    function isWhitelist(address _address) public view returns (bool) {\n        return _whitelist[_address];\n    }\n\n    function setWhitelist(address _address, bool _on) external onlyOwner {\n        _whitelist[_address] = _on;\n\n        emit Whitelisted(_address, _on);\n    }\n\n    function disableWhitelist(bool disable) external onlyOwner {\n        _disable = disable;\n        if (disable) {\n            emit DisableWhitelist();\n        } else {\n            emit EnableWhitelist();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}