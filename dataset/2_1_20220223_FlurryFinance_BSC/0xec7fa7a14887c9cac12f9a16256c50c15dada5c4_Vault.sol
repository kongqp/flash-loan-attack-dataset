{{
  "language": "Solidity",
  "sources": {
    "contracts/vault/Vault.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"../interfaces/IVault.sol\";\r\nimport \"../interfaces/IRhoToken.sol\";\r\nimport \"../interfaces/IPriceOracle.sol\";\r\nimport \"../interfaces/ITokenExchange.sol\";\r\nimport \"../interfaces/IVaultConfig.sol\";\r\n\r\ncontract Vault is IVault, AccessControlEnumerableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using SafeERC20Upgradeable for IRhoToken;\r\n\r\n    bytes32 public constant REBASE_ROLE = keccak256(\"REBASE_ROLE\");\r\n    bytes32 public constant COLLECT_ROLE = keccak256(\"COLLECT_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant SWEEPER_ROLE = keccak256(\"SWEEPER_ROLE\");\r\n    IVaultConfig public override config;\r\n\r\n    uint256 public override feeInRho;\r\n\r\n    function initialize(address config_) external initializer {\r\n        require(config_ != address(0), \"VE1\");\r\n        AccessControlEnumerableUpgradeable.__AccessControlEnumerable_init();\r\n        PausableUpgradeable.__Pausable_init_unchained();\r\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained();\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        config = IVaultConfig(config_);\r\n    }\r\n\r\n    // only used as param of `V2TokenExchange.sellExactInput()`\r\n    function flurryToken() internal view returns (IERC20MetadataUpgradeable) {\r\n        return IERC20MetadataUpgradeable(config.flurryToken());\r\n    }\r\n\r\n    function rhoToken() public view returns (IRhoToken) {\r\n        return IRhoToken(config.rhoToken());\r\n    }\r\n\r\n    function underlying() public view returns (IERC20MetadataUpgradeable) {\r\n        return IERC20MetadataUpgradeable(config.underlying());\r\n    }\r\n\r\n    function reserveBoundary(uint256 i) external view returns (uint256) {\r\n        return config.reserveBoundary(i);\r\n    }\r\n\r\n    function rhoOne() internal view returns (uint256) {\r\n        return config.rhoOne();\r\n    }\r\n\r\n    function underlyingOne() internal view returns (uint256) {\r\n        return config.underlyingOne();\r\n    }\r\n\r\n    function mintingFee() internal view returns (uint256) {\r\n        return config.mintingFee();\r\n    }\r\n\r\n    function redeemFee() internal view returns (uint256) {\r\n        return config.redeemFee();\r\n    }\r\n\r\n    function supportsAsset(address _asset) external view override returns (bool) {\r\n        return _asset == address(underlying());\r\n    }\r\n\r\n    function reserve() public view override returns (uint256) {\r\n        return underlying().balanceOf(address(this));\r\n    }\r\n\r\n    function getStrategiesList() public view override returns (IVaultConfig.Strategy[] memory) {\r\n        return config.getStrategiesList();\r\n    }\r\n\r\n    function getStrategiesListLength() public view override returns (uint256) {\r\n        return config.getStrategiesListLength();\r\n    }\r\n\r\n    /* distribution */\r\n    function mint(uint256 amount) external override whenNotPaused nonReentrant {\r\n        underlying().safeTransferFrom(_msgSender(), address(this), amount);\r\n        uint256 amountInRho = (amount * rhoOne()) / underlyingOne();\r\n        uint256 _mintingFee = mintingFee();\r\n        uint256 chargeAmount = (amountInRho * _mintingFee) / 1e4;\r\n        rhoToken().mint(_msgSender(), amountInRho - chargeAmount);\r\n        if (_mintingFee > 0) {\r\n            rhoToken().mint(address(this), chargeAmount);\r\n            feeInRho += chargeAmount;\r\n        }\r\n        emit ReserveChanged(reserve());\r\n    }\r\n\r\n    function redeem(uint256 amountInRho) external override whenNotPaused nonReentrant {\r\n        require(rhoToken().balanceOf(_msgSender()) >= amountInRho, \"VE2\");\r\n\r\n        uint256 amountInUnderlying = (amountInRho * underlyingOne()) / rhoOne();\r\n        uint256 reserveBalance = reserve();\r\n        uint256 _redeemFee = redeemFee();\r\n        uint256 chargeAmount = (amountInRho * _redeemFee) / 1e4;\r\n        uint256 chargeAmountInUnderlying = (chargeAmount * underlyingOne()) / rhoOne();\r\n\r\n        if (reserveBalance >= amountInUnderlying) {\r\n            rhoToken().burn(_msgSender(), amountInRho);\r\n            underlying().safeTransfer(_msgSender(), amountInUnderlying - chargeAmountInUnderlying);\r\n            if (chargeAmount > 0) {\r\n                rhoToken().mint(address(this), chargeAmount);\r\n                emit ReserveChanged(reserve());\r\n                feeInRho += chargeAmount;\r\n            }\r\n            emit ReserveChanged(reserve());\r\n            return;\r\n        }\r\n\r\n        IVaultConfig.Strategy[] memory strategies = config.getStrategiesList();\r\n\r\n        // reserveBalance hit zero, unallocate to replenish reserveBalance to lower bound\r\n        (uint256[] memory balance, uint256[] memory withdrawable, , , ) = config.updateStrategiesDetail(reserve());\r\n\r\n        uint256 totalUnderlyingToBe = (rhoToken().totalSupply() * underlyingOne()) / rhoOne() - amountInUnderlying;\r\n        uint256 amountToWithdraw = amountInUnderlying - reserveBalance + config.reserveLowerBound(totalUnderlyingToBe); // in underlying\r\n\r\n        // VFF-04 although strategies array is unbounded, only flurry'a DEFAULT_ADMIN_ROLE will be able to add a strategies\r\n        // thus there is immediate no denial-of-service threat\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            uint256 stgTarget = strategies[i].target.switchingLockTarget();\r\n            if (withdrawable[i] > amountToWithdraw) {\r\n                strategies[i].target.withdrawUnderlying(amountToWithdraw);\r\n                if (stgTarget > withdrawable[i]) {\r\n                    strategies[i].target.switchingLock(stgTarget - withdrawable[i], false);\r\n                } else {\r\n                    strategies[i].target.switchingLock(0, false);\r\n                }\r\n                break;\r\n            } else {\r\n                if (balance[i] == 0) {\r\n                    continue;\r\n                }\r\n                if (stgTarget > withdrawable[i]) {\r\n                    strategies[i].target.switchingLock(stgTarget - withdrawable[i], false);\r\n                } else {\r\n                    strategies[i].target.switchingLock(0, false);\r\n                }\r\n                amountToWithdraw -= withdrawable[i];\r\n                strategies[i].target.withdrawAllCashAvailable();\r\n            }\r\n        }\r\n\r\n        rhoToken().burn(_msgSender(), amountInRho);\r\n        underlying().safeTransfer(_msgSender(), amountInUnderlying - chargeAmountInUnderlying);\r\n        if (chargeAmount > 0) {\r\n            rhoToken().mint(address(this), chargeAmount);\r\n            emit ReserveChanged(reserve());\r\n            feeInRho += chargeAmount;\r\n        }\r\n        emit ReserveChanged(reserve());\r\n    }\r\n\r\n    /* asset management */\r\n    function rebase() external override onlyRole(REBASE_ROLE) whenNotPaused nonReentrant {\r\n        IVaultConfig.Strategy[] memory strategies = config.getStrategiesList();\r\n\r\n        uint256 originalTvlInRho = rhoToken().totalSupply();\r\n        if (originalTvlInRho == 0) {\r\n            return;\r\n        }\r\n        // rebalance fund\r\n        _rebalance();\r\n        uint256 underlyingInvested;\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            underlyingInvested += strategies[i].target.updateBalanceOfUnderlying();\r\n        }\r\n        uint256 currentTvlInUnderlying = reserve() + underlyingInvested;\r\n        uint256 currentTvlInRho = (currentTvlInUnderlying * rhoOne()) / underlyingOne();\r\n        uint256 rhoRebasing = rhoToken().unadjustedRebasingSupply();\r\n        uint256 rhoNonRebasing = rhoToken().nonRebasingSupply();\r\n\r\n        if (rhoRebasing < 1e18) {\r\n            // in this case, rhoNonRebasing = rho TotalSupply\r\n            uint256 originalTvlInUnderlying = (originalTvlInRho * underlyingOne()) / rhoOne();\r\n            if (currentTvlInUnderlying > originalTvlInUnderlying) {\r\n                // invested accrued interest\r\n                // all the interest goes to the fee pool since no one is entitled for the interest.\r\n                uint256 feeToMint = ((currentTvlInUnderlying - originalTvlInUnderlying) * rhoOne()) / underlyingOne();\r\n                rhoToken().mint(address(this), feeToMint);\r\n                feeInRho += feeToMint;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // from this point forward, rhoRebasing > 0\r\n        if (currentTvlInRho == originalTvlInRho) {\r\n            // no fees charged, multiplier does not change\r\n            return;\r\n        }\r\n        if (currentTvlInRho < originalTvlInRho) {\r\n            // this happens when fund is initially deployed to compound and get balance of underlying right away\r\n            // strategy losing money, no fees will be charged\r\n            uint256 _newM = ((currentTvlInRho - rhoNonRebasing) * 1e36) / rhoRebasing;\r\n            rhoToken().setMultiplier(_newM);\r\n            return;\r\n        }\r\n        uint256 fee36 = (currentTvlInRho - originalTvlInRho) * config.managementFee();\r\n        uint256 fee18 = fee36 / 1e18;\r\n        if (fee18 > 0) {\r\n            // mint vault's fee18\r\n            rhoToken().mint(address(this), fee18);\r\n            feeInRho += fee18;\r\n        }\r\n        uint256 newM = ((currentTvlInRho * 1e18 - rhoNonRebasing * 1e18 - fee36) * 1e18) / rhoRebasing;\r\n        rhoToken().setMultiplier(newM);\r\n    }\r\n\r\n    function rebalance() external override onlyRole(REBASE_ROLE) whenNotPaused nonReentrant {\r\n        _rebalance();\r\n    }\r\n\r\n    function _rebalance() internal {\r\n        IVaultConfig.Strategy[] memory strategies = config.getStrategiesList();\r\n        uint256 gasused;\r\n        (\r\n            uint256[] memory balance,\r\n            uint256[] memory withdrawable,\r\n            bool[] memory locked,\r\n            uint256 optimalIndex,\r\n            uint256 underlyingDeployable\r\n        ) = config.updateStrategiesDetail(reserve());\r\n        for (uint256 i = 0; i < strategies.length; i++) {\r\n            if (balance[i] == 0) continue;\r\n            if (locked[i]) continue;\r\n            if (optimalIndex == i) continue;\r\n            // withdraw\r\n            uint256 gas0 = gasleft();\r\n            strategies[i].target.withdrawAllCashAvailable();\r\n            uint256 stgTarget = strategies[i].target.switchingLockTarget();\r\n            if (stgTarget > withdrawable[i]) {\r\n                strategies[i].target.switchingLock(stgTarget - withdrawable[i], false);\r\n            } else {\r\n                strategies[i].target.switchingLock(0, false);\r\n            }\r\n            emit VaultRatesChanged(config.supplyRate(), config.indicativeSupplyRate());\r\n            gasused += gas0 - gasleft();\r\n        }\r\n\r\n        uint256 deployAmount;\r\n        if (locked[optimalIndex]) {\r\n            // locked fund is not counted in underlyingDeployable\r\n            deployAmount = underlyingDeployable;\r\n        } else {\r\n            // locked fund is counted in underlyingDeployable, offset the deployable by its own balance\r\n            deployAmount = underlyingDeployable - withdrawable[optimalIndex];\r\n        }\r\n\r\n        if (deployAmount != 0) {\r\n            uint256 gas1 = gasleft();\r\n            underlying().safeTransfer(address(strategies[optimalIndex].target), deployAmount);\r\n            strategies[optimalIndex].target.deploy(deployAmount);\r\n            gasused += gas1 - gasleft();\r\n\r\n            uint256 nativePrice =\r\n                IPriceOracle(config.underlyingNativePriceOracle()).priceByQuoteSymbol(address(underlying()));\r\n            uint256 switchingCostInUnderlying = (gasused * tx.gasprice * nativePrice * underlyingOne()) / 1e36;\r\n            strategies[optimalIndex].target.switchingLock(\r\n                deployAmount + switchingCostInUnderlying + strategies[optimalIndex].target.switchingLockTarget(),\r\n                true\r\n            );\r\n            emit ReserveChanged(reserve());\r\n        } else {\r\n            strategies[optimalIndex].target.deploy(deployAmount);\r\n        }\r\n    }\r\n\r\n    // withdraw random token transfer into this contract\r\n    function sweepERC20Token(address token, address to) external override onlyRole(SWEEPER_ROLE) whenNotPaused {\r\n        require(token != address(0), \"VE3\");\r\n        require(token != address(underlying()) && token != address(rhoToken()), \"!safe\");\r\n        IERC20Upgradeable tokenToSweep = IERC20Upgradeable(token);\r\n        tokenToSweep.safeTransfer(to, tokenToSweep.balanceOf(address(this)));\r\n    }\r\n\r\n    function sweepRhoTokenContractERC20Token(address token, address to)\r\n        external\r\n        override\r\n        onlyRole(SWEEPER_ROLE)\r\n        whenNotPaused\r\n    {\r\n        rhoToken().sweepERC20Token(token, to);\r\n    }\r\n\r\n    function supplyRate() external view override returns (uint256) {\r\n        return config.supplyRate();\r\n    }\r\n\r\n    function collectStrategiesRewardTokenByIndex(uint16[] memory collectList)\r\n        external\r\n        override\r\n        onlyRole(COLLECT_ROLE)\r\n        whenNotPaused\r\n        nonReentrant\r\n        returns (bool[] memory sold)\r\n    {\r\n        sold = new bool[](collectList.length);\r\n        IVaultConfig.Strategy[] memory strategies = config.getStrategiesList();\r\n        for (uint256 i = 0; i < collectList.length; i++) {\r\n            if (strategies[collectList[i]].target.shouldCollectReward(config.rewardCollectThreshold())) {\r\n                try strategies[collectList[i]].target.collectRewardToken() {\r\n                    sold[i] = true;\r\n                } catch Error(string memory reason) {\r\n                    emit CollectRewardError(msg.sender, address(strategies[collectList[i]].target), reason);\r\n                    continue;\r\n                } catch {\r\n                    emit CollectRewardUnknownError(msg.sender, address(strategies[collectList[i]].target));\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkStrategiesCollectReward() external view override returns (bool[] memory collectList) {\r\n        return config.checkStrategiesCollectReward();\r\n    }\r\n\r\n    function withdrawFees(uint256 amount, address to) external override onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(feeInRho >= amount, \"VE4\");\r\n        feeInRho -= amount;\r\n        rhoToken().safeTransfer(to, amount);\r\n    }\r\n\r\n    function shouldRepurchaseFlurry() external view override returns (bool) {\r\n        return feeInRho >= config.repurchaseFlurryThreshold();\r\n    }\r\n\r\n    function repurchaseFlurry() external override onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused nonReentrant {\r\n        // sanity check\r\n        require(config.repurchaseSanityCheck(), \"VE5\");\r\n        // setup Token Exchange and rhoToken\r\n        ITokenExchange tokenEx = ITokenExchange(config.tokenExchange());\r\n        uint256 rhoToSell = (feeInRho * config.repurchaseFlurryRatio()) / 1e18;\r\n        rhoToken().safeIncreaseAllowance(address(tokenEx), rhoToSell);\r\n        // state change\r\n        feeInRho -= rhoToSell;\r\n        // sell rhoToken at TokenExchange for FLURRY\r\n        uint256 flurryReceived =\r\n            tokenEx.sellExactInput(rhoToken(), flurryToken(), config.flurryStakingRewards(), rhoToSell);\r\n        emit RepurchasedFlurry(rhoToSell, flurryReceived);\r\n    }\r\n\r\n    /* pause */\r\n    function pause() external onlyRole(PAUSER_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyRole(PAUSER_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    function retireStrategy(address strategy)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(strategy != address(0), \"VE6\");\r\n        IRhoStrategy target = IRhoStrategy(strategy);\r\n\r\n        // claim and sell bonus tokens, if any\r\n        if (target.bonusToken() != address(0)) {\r\n            IERC20Upgradeable bonusToken = IERC20Upgradeable(target.bonusToken());\r\n            if (bonusToken.balanceOf(address(this)) > 0 || target.bonusTokensAccrued() > 0) target.collectRewardToken();\r\n        }\r\n\r\n        // recall funds if there any from strategy\r\n        target.withdrawAllCashAvailable();\r\n        require(target.updateBalanceOfUnderlying() == 0, \"VE7\");\r\n        config.removeStrategy(strategy);\r\n    }\r\n\r\n    function indicativeSupplyRate() external view override returns (uint256) {\r\n        return config.indicativeSupplyRate();\r\n    }\r\n\r\n    function mintWithDepositToken(uint256 amount, address depositToken) external override whenNotPaused nonReentrant {\r\n        address unwinder = address(config.getDepositUnwinder(depositToken).target);\r\n        require(unwinder != address(0), \"VE8\");\r\n\r\n        // transfer deposit tokens to unwinder for redeem and unwind actions\r\n        IERC20MetadataUpgradeable(depositToken).safeTransferFrom(_msgSender(), address(this), amount);\r\n        IERC20MetadataUpgradeable(depositToken).safeTransferFrom(address(this), unwinder, amount);\r\n\r\n        uint256 underlyingAdded = IDepositUnwinder(unwinder).unwind(depositToken, address(this));\r\n\r\n        // mint rhoToken\r\n        rhoToken().mint(_msgSender(), (underlyingAdded * rhoOne()) / underlyingOne());\r\n    }\r\n\r\n    function getDepositTokens() external view override returns (address[] memory) {\r\n        return config.getDepositTokens();\r\n    }\r\n\r\n    function getDepositUnwinder(address token) external view override returns (IVaultConfig.DepositUnwinder memory) {\r\n        return config.getDepositUnwinder(token);\r\n    }\r\n\r\n    function retireDepositUnwinder(address token)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(token != address(0), \"VE9\");\r\n\r\n        // there should not be any token left in the unwinder\r\n        // not doing checking\r\n\r\n        config.removeDepositUnwinder(token);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControlUpgradeable, IAccessControlUpgradeable) {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IVaultConfig.sol\";\r\n\r\ninterface IVault {\r\n    event ReserveChanged(uint256 reserveBalance);\r\n    event RepurchasedFlurry(uint256 rhoTokenIn, uint256 flurryOut);\r\n    event RepurchaseFlurryFailed(uint256 rhoTokenIn);\r\n    event CollectRewardError(address indexed _from, address indexed _strategy, string _reason);\r\n    event CollectRewardUnknownError(address indexed _from, address indexed _strategy);\r\n    event VaultRatesChanged(uint256 supplyRate, uint256 indicativeSupplyRate);\r\n    event Log(string message);\r\n\r\n    /**\r\n     * @return accumulated rhoToken management fee in vault\r\n     */\r\n    function feeInRho() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev getter function for cash reserve\r\n     * @return return cash reserve balance (in underlying) for vault\r\n     */\r\n    function reserve() external view returns (uint256);\r\n\r\n    /**\r\n     * @return True if the asset is supported by this vault\r\n     */\r\n    function supportsAsset(address _asset) external view returns (bool);\r\n\r\n    /**\r\n     * @dev function that trigggers the distribution of interest earned to Rho token holders\r\n     */\r\n    function rebase() external;\r\n\r\n    /**\r\n     * @dev function that trigggers allocation and unallocation of funds based on reserve pool bounds\r\n     */\r\n    function rebalance() external;\r\n\r\n    /**\r\n     * @dev function to mint RhoToken\r\n     * @param amount amount in underlying stablecoin\r\n     */\r\n    function mint(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev function to redeem RhoToken\r\n     * @param amount amount of rhoTokens to be redeemed\r\n     */\r\n    function redeem(uint256 amount) external;\r\n\r\n    /**\r\n     * admin functions to withdraw random token transfer to this contract\r\n     */\r\n    function sweepERC20Token(address token, address to) external;\r\n\r\n    function sweepRhoTokenContractERC20Token(address token, address to) external;\r\n\r\n    /**\r\n     * @dev function to check strategies shoud collect reward\r\n     * @return List of boolean\r\n     */\r\n    function checkStrategiesCollectReward() external view returns (bool[] memory);\r\n\r\n    /**\r\n     * @return supply rate (pa) for Vault\r\n     */\r\n    function supplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev function to collect strategies reward token\r\n     * @param collectList strategies to be collect\r\n     */\r\n    function collectStrategiesRewardTokenByIndex(uint16[] memory collectList) external returns (bool[] memory);\r\n\r\n    /**\r\n     * admin functions to withdraw fees\r\n     */\r\n    function withdrawFees(uint256 amount, address to) external;\r\n\r\n    /**\r\n     * @return true if feeInRho >= repurchaseFlurryThreshold, false otherwise\r\n     */\r\n    function shouldRepurchaseFlurry() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Calculates the amount of rhoToken used to repurchase FLURRY.\r\n     * The selling is delegated to Token Exchange. FLURRY obtained\r\n     * is directly sent to Flurry Staking Rewards.\r\n     */\r\n    function repurchaseFlurry() external;\r\n\r\n    /**\r\n     * @return reference to IVaultConfig contract\r\n     */\r\n    function config() external view returns (IVaultConfig);\r\n\r\n    /**\r\n     * @return list of strategy addresses\r\n     */\r\n    function getStrategiesList() external view returns (IVaultConfig.Strategy[] memory);\r\n\r\n    /**\r\n     * @return no. of strategies registered\r\n     */\r\n    function getStrategiesListLength() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev retire rhoStrategy from the Vault\r\n     * this is used by test suite only\r\n     * @param strategy address of IRhoStrategy\r\n     */\r\n    function retireStrategy(address strategy) external;\r\n\r\n    /**\r\n     * @dev indicative supply rate\r\n     * signifies the supply rate after next rebase\r\n     */\r\n    function indicativeSupplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev function to mint RhoToken using a deposit token\r\n     * @param amount amount in deposit tokens\r\n     * @param depositToken address of deposit token\r\n     */\r\n    function mintWithDepositToken(uint256 amount, address depositToken) external;\r\n\r\n    /**\r\n     * @return list of deposit tokens addresses\r\n     */\r\n    function getDepositTokens() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @param token deposit token address\r\n     * @return deposit unwinder (name and address)\r\n     */\r\n    function getDepositUnwinder(address token) external view returns (IVaultConfig.DepositUnwinder memory);\r\n\r\n    /**\r\n     * @dev retire deposit unwinder support for a deposit token\r\n     * this is used by test suite only\r\n     * @param token address of dpeosit token\r\n     */\r\n    function retireDepositUnwinder(address token) external;\r\n}\r\n"
    },
    "contracts/interfaces/IRhoToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\n\r\n/**\r\n * @notice Interface for yield farming strategies to integrate with various DeFi Protocols like Compound, Aave, dYdX.. etc\r\n */\r\ninterface IRhoToken is IERC20MetadataUpgradeable {\r\n    event MultiplierChange(uint256 to);\r\n    event RhoTokenSupplyChanged(uint256 totalSupply, uint256 rebasingSupply, uint256 nonRebasingSupply);\r\n\r\n    /**\r\n     * @notice specific to BEP-20 interface\r\n     * @return the address of the contract owner\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev adjusted supply is multiplied by multiplier from rebasing\r\n     * @return issued amount of rhoToken that is rebasing\r\n     * Total supply = adjusted rebasing supply + non-rebasing supply\r\n     * Adjusted rebasing supply = unadjusted rebasing supply * multiplier\r\n     */\r\n    function adjustedRebasingSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev unadjusted supply is NOT multiplied by multiplier from rebasing\r\n     * @return internally stored amount of rhoTokens that is rebasing\r\n     */\r\n    function unadjustedRebasingSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @return issued amount of rhoTokens that is non-rebasing\r\n     */\r\n    function nonRebasingSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice The multiplier is set during a rebase\r\n     * @param multiplier - scaled by 1e36\r\n     */\r\n    function setMultiplier(uint256 multiplier) external;\r\n\r\n    /**\r\n     * @return multiplier - returns the muliplier of the rhoToken, scaled by 1e36\r\n     * @return lastUpdate - last update time of the multiplier, equivalent to last rebase time\r\n     */\r\n    function getMultiplier() external view returns (uint256 multiplier, uint256 lastUpdate);\r\n\r\n    /**\r\n     * @notice function to mint rhoTokens - callable only by owner\r\n     * @param account account for sending new minted tokens to\r\n     * @param amount amount of tokens to be minted\r\n     */\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice function to burn rhoTokens - callable only by owner\r\n     * @param account the account address for burning tokens from\r\n     * @param amount amount of tokens to be burned\r\n     */\r\n    function burn(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice switches the account type of `msg.sender` between rebasing and non-rebasing\r\n     * @param isRebasing true if setting to rebasing, false if setting to non-rebasing\r\n     * NOTE: this function does nothing if caller is already in the same option\r\n     */\r\n    function setRebasingOption(bool isRebasing) external;\r\n\r\n    /**\r\n     * @param account address of account to check\r\n     * @return true if `account` is a rebasing account\r\n     */\r\n    function isRebasingAccount(address account) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Admin function - set reference token rewards contract\r\n     * @param tokenRewards token rewards contract address\r\n     */\r\n    function setTokenRewards(address tokenRewards) external;\r\n\r\n    /**\r\n     * @notice Admin function to sweep ERC20s (other than rhoToken) accidentally sent to this contract\r\n     * @param token token contract address\r\n     * @param to which address to send sweeped ERC20s to\r\n     */\r\n    function sweepERC20Token(address token, address to) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IPriceOracle {\r\n    /**\r\n     * @return decimals of the \"baseSymbol / quoteSymbol\" rate\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @return name of the token pair, in the form of \"baseSymbol / quoteSymbol\"\r\n     */\r\n    function description() external view returns (string memory);\r\n\r\n    /**\r\n     * @return name of the base symbol\r\n     */\r\n    function baseSymbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @return name of the quote symbol\r\n     */\r\n    function quoteSymbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @return address of the base symbol, zero address if `baseSymbol` is USD\r\n     */\r\n    function baseAddr() external view returns (address);\r\n\r\n    /**\r\n     * @return address of the quote symbol, zero address if `baseSymbol` is USD\r\n     */\r\n    function quoteAddr() external view returns (address);\r\n\r\n    /**\r\n     * @return updateAt timestamp of the last update as seconds since unix epoch\r\n     */\r\n    function lastUpdate() external view returns (uint256 updateAt);\r\n\r\n    /**\r\n     * @param _baseAddr address of the base symbol\r\n     * @return the price feed in `decimals`, or type(uint256).max if the rate is invalid\r\n     * Example: priceFeed() == 2e18\r\n     *          => 1 baseSymbol = 2 quoteSymbol\r\n     */\r\n    function price(address _baseAddr) external view returns (uint256);\r\n\r\n    /**\r\n     * @param _quoteAddr address of the quote symbol\r\n     * @return the price feed in `decimals`, or type(uint256).max if the rate is invalid\r\n     */\r\n    function priceByQuoteSymbol(address _quoteAddr) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ITokenExchange.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\nimport \"./IPriceOracle.sol\";\r\n\r\n/**\r\n * @title Token Exchange Interface\r\n * @notice Interface for exchanging token on other protocols such as uniswap\r\n *\r\n */\r\ninterface ITokenExchange {\r\n    event SellToken(address inputToken, address outputToken, uint256 amountIn, uint256 amountOut);\r\n\r\n    /**\r\n     * @notice A method to sell input token into output token for a certain input amount.\r\n     * @return uint256 ouptut token received\r\n     */\r\n    function sellExactInput(\r\n        IERC20MetadataUpgradeable inputToken,\r\n        IERC20MetadataUpgradeable outputToken,\r\n        address recipient,\r\n        uint256 amountIn_\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IVaultConfig.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./IRhoStrategy.sol\";\r\nimport \"./IDepositUnwinder.sol\";\r\n\r\ninterface IVaultConfig {\r\n    event Log(string message);\r\n    event StrategyAdded(string name, address addr);\r\n    event StrategyRemoved(string name, address addr);\r\n    event StrategyRatesChanged(address indexed strategy, uint256 effRate, uint256 supplyRate, uint256 bonusRate);\r\n    event DepositUnwinderAdded(address token, address addr);\r\n    event DepositUnwinderRemoved(address token, address addr);\r\n\r\n    struct Strategy {\r\n        string name;\r\n        IRhoStrategy target;\r\n    }\r\n\r\n    struct DepositUnwinder {\r\n        string tokenName;\r\n        IDepositUnwinder target;\r\n    }\r\n\r\n    /**\r\n     * @return FLURRY token address\r\n     */\r\n    function flurryToken() external view returns (address);\r\n\r\n    /**\r\n     * @return Returns the address of the Rho token contract\r\n     */\r\n    function rhoToken() external view returns (address);\r\n\r\n    function rhoOne() external view returns (uint256);\r\n\r\n    /**\r\n     * Each Vault currently only supports one underlying asset\r\n     * @return Returns the contract address of the underlying asset\r\n     */\r\n    function underlying() external view returns (address);\r\n\r\n    function underlyingOne() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter function for Rho token minting fee\r\n     * @return Return the minting fee (in bps)\r\n     */\r\n    function mintingFee() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter function for Rho token redemption fee\r\n     * @return Return the redeem fee (in bps)\r\n     */\r\n    function redeemFee() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Getter function for allocation lowerbound and upperbound\r\n     */\r\n    function reserveBoundary(uint256 index) external view returns (uint256);\r\n\r\n    function managementFee() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev The threshold (denominated in underlying asset ) over which rewards tokens will automatically\r\n     * be converted into the underlying asset\r\n     */\r\n\r\n    function rewardCollectThreshold() external view returns (uint256);\r\n\r\n    function underlyingNativePriceOracle() external view returns (address);\r\n\r\n    function setUnderlyingNativePriceOracle(address addr) external;\r\n\r\n    /**\r\n     * @dev Setter function for Rho token redemption fee\r\n     */\r\n    function setRedeemFee(uint256 _feeInBps) external;\r\n\r\n    /**\r\n     * @dev set the threshold for collect reward (denominated in underlying asset)\r\n     */\r\n    function setRewardCollectThreshold(uint256 _rewardCollectThreshold) external;\r\n\r\n    function setManagementFee(uint256 _feeInBps) external;\r\n\r\n    /**\r\n     * @dev set the allocation threshold (denominated in underlying asset)\r\n     */\r\n    function setReserveBoundary(uint256 _lowerBound, uint256 _upperBound) external;\r\n\r\n    /**\r\n     * @dev Setter function for minting fee (in bps)\r\n     */\r\n    function setMintingFee(uint256 _feeInBps) external;\r\n\r\n    function reserveLowerBound(uint256 tvl) external view returns (uint256);\r\n\r\n    function reserveUpperBound(uint256 tvl) external view returns (uint256);\r\n\r\n    function supplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Add strategy contract which implments the IRhoStrategy interface to the vault\r\n     */\r\n    function addStrategy(string memory name, address strategy) external;\r\n\r\n    /**\r\n     * @dev Remove strategy contract which implments the IRhoStrategy interface from the vault\r\n     */\r\n    function removeStrategy(address strategy) external;\r\n\r\n    /**\r\n     * @dev Check if a strategy is registered\r\n     * @param s address of strategy contract\r\n     * @return boolean\r\n     */\r\n    function isStrategyRegistered(address s) external view returns (bool);\r\n\r\n    function getStrategiesList() external view returns (Strategy[] memory);\r\n\r\n    function getStrategiesListLength() external view returns (uint256);\r\n\r\n    function updateStrategiesDetail(uint256 vaultUnderlyingBalance)\r\n        external\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            bool[] memory,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function checkStrategiesCollectReward() external view returns (bool[] memory collectList);\r\n\r\n    function indicativeSupplyRate() external view returns (uint256);\r\n\r\n    function setFlurryToken(address addr) external;\r\n\r\n    function flurryStakingRewards() external view returns (address);\r\n\r\n    function setFlurryStakingRewards(address addr) external;\r\n\r\n    function tokenExchange() external view returns (address);\r\n\r\n    function setTokenExchange(address addr) external;\r\n\r\n    /**\r\n     * @notice Part of the management fee is used to buy back FLURRY\r\n     * from AMM. The FLURRY tokens are sent to FlurryStakingRewards\r\n     * to replendish the rewards pool.\r\n     * @return ratio of repurchasing, with 1e18 representing 100%\r\n     */\r\n    function repurchaseFlurryRatio() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice setter method for `repurchaseFlurryRatio`\r\n     * @param _ratio new ratio to be set, must be <=1e18\r\n     */\r\n    function setRepurchaseFlurryRatio(uint256 _ratio) external;\r\n\r\n    /**\r\n     * @notice Triggers FLURRY repurchasing if management fee >= threshold\r\n     * @return threshold for triggering FLURRY repurchasing\r\n     */\r\n    function repurchaseFlurryThreshold() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice setter method for `repurchaseFlurryThreshold`\r\n     * @param _threshold new threshold to be set\r\n     */\r\n    function setRepurchaseFlurryThreshold(uint256 _threshold) external;\r\n\r\n    /**\r\n     * @dev Vault should call this before repurchaseFlurry() for sanity check\r\n     * @return true if all dependent contracts are valid\r\n     */\r\n    function repurchaseSanityCheck() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Get the strategy which the deposit token belongs to\r\n     * @param depositToken address of deposit token\r\n     */\r\n    function getStrategy(address depositToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Add unwinder contract which implments the IDepositUnwinder interface to the vault\r\n     * @param token deposit token address\r\n     * @param tokenName deposit token name\r\n     * @param unwinder deposit unwinder address\r\n     */\r\n    function addDepositUnwinder(\r\n        address token,\r\n        string memory tokenName,\r\n        address unwinder\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Remove unwinder contract which implments the IDepositUnwinder interface from the vault\r\n     * @param token deposit token address\r\n     */\r\n    function removeDepositUnwinder(address token) external;\r\n\r\n    /**\r\n     * @dev Get the unwinder which the deposit token belongs to\r\n     * @param token deposit token address\r\n     * @return d unwinder object\r\n     */\r\n    function getDepositUnwinder(address token) external view returns (DepositUnwinder memory d);\r\n\r\n    /**\r\n     * @dev Get the deposit tokens\r\n     * @return deposit token addresses\r\n     */\r\n    function getDepositTokens() external view returns (address[] memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IRhoStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\r\n\r\n/**\r\n * @title RhoStrategy Interface\r\n * @notice Interface for yield farming strategies to integrate with various DeFi Protocols like Compound, Aave, dYdX.. etc\r\n */\r\ninterface IRhoStrategy {\r\n    /**\r\n     * Events\r\n     */\r\n    event WithdrawAllCashAvailable();\r\n    event WithdrawUnderlying(uint256 amount);\r\n    event Deploy(uint256 amount);\r\n    event StrategyOutOfCash(uint256 balance, uint256 withdrawable);\r\n    event BalanceOfUnderlyingChanged(uint256 balance);\r\n\r\n    /**\r\n     * @return name of protocol\r\n     */\r\n    function NAME() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev for conversion bwtween APY and per block rate\r\n     * @return number of blocks per year\r\n     */\r\n    function BLOCK_PER_YEAR() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev setter function for `BLOCK_PER_YEAR`\r\n     * @param blocksPerYear new number of blocks per year\r\n     */\r\n    function setBlocksPerYear(uint256 blocksPerYear) external;\r\n\r\n    /**\r\n     * @return underlying ERC20 token\r\n     */\r\n    function underlying() external view returns (IERC20MetadataUpgradeable);\r\n\r\n    /**\r\n     * @dev unlock when TVL exceed the this target\r\n     */\r\n    function switchingLockTarget() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev duration for locking the strategy\r\n     */\r\n    function switchLockDuration() external view returns (uint256);\r\n\r\n    /**\r\n     * @return block number after which rewards are unlocked\r\n     */\r\n    function switchLockedUntil() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev setter of switchLockDuration\r\n     */\r\n    function setSwitchLockDuration(uint256 durationInBlock) external;\r\n\r\n    /**\r\n     * @dev lock the strategy with a lock target\r\n     */\r\n    function switchingLock(uint256 lockTarget, bool extend) external;\r\n\r\n    /**\r\n     * @dev view function to return balance in underlying\r\n     * @return balance (interest included) from DeFi protocol, in terms of underlying (in wei)\r\n     */\r\n    function balanceOfUnderlying() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev updates the balance in underlying, and returns it. An `BalanceOfUnderlyingChanged` event is also emitted\r\n     * @return updated balance (interest included) from DeFi protocol, in terms of underlying (in wei)\r\n     */\r\n    function updateBalanceOfUnderlying() external returns (uint256);\r\n\r\n    /**\r\n     * @dev deploy the underlying to DeFi platform\r\n     * @param _amount amount of underlying (in wei) to deploy\r\n     */\r\n    function deploy(uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice current supply rate per block excluding bonus token (such as Aave / Comp)\r\n     * @return supply rate per block, excluding yield from reward token if any\r\n     */\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice current supply rate excluding bonus token (such as Aave / Comp)\r\n     * @return supply rate per year, excluding yield from reward token if any\r\n     */\r\n    function supplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @return address of bonus token contract, or 0 if no bonus token\r\n     */\r\n    function bonusToken() external view returns (address);\r\n\r\n    /**\r\n     * @notice current bonus rate per block for bonus token (such as Aave / Comp)\r\n     * @return bonus supply rate per block\r\n     */\r\n    function bonusRatePerBlock() external view returns (uint256);\r\n\r\n    /**\r\n     * @return bonus tokens accrued\r\n     */\r\n    function bonusTokensAccrued() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice current bonus supply rate (such as Aave / Comp)\r\n     * @return bonus supply rate per year\r\n     */\r\n    function bonusSupplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice effective supply rate of the RhoStrategy\r\n     * @dev returns the effective supply rate fomr the underlying DeFi protocol\r\n     * taking into account any rewards tokens\r\n     * @return supply rate per year, including yield from reward token if any (in wei)\r\n     */\r\n    function effectiveSupplyRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice effective supply rate of the RhoStrategy\r\n     * @dev returns the effective supply rate fomr the underlying DeFi protocol\r\n     * taking into account any rewards tokens AND the change in deployed amount.\r\n     * @param delta magnitude of underlying to be deployed / withdrawn\r\n     * @param isPositive true if `delta` is deployed, false if `delta` is withdrawn\r\n     * @return supply rate per year, including yield from reward token if any (in wei)\r\n     */\r\n    function effectiveSupplyRate(uint256 delta, bool isPositive) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Withdraw the amount in underlying from DeFi protocol and transfer to vault\r\n     * @param _amount amount of underlying (in wei) to withdraw\r\n     */\r\n    function withdrawUnderlying(uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Withdraw all underlying from DeFi protocol and transfer to vault\r\n     */\r\n    function withdrawAllCashAvailable() external;\r\n\r\n    /**\r\n     * @dev Collect any bonus reward tokens available for the strategy\r\n     */\r\n    function collectRewardToken() external;\r\n\r\n    /**\r\n     * @dev admin function - withdraw random token transfer to this contract\r\n     */\r\n    function sweepERC20Token(address token, address to) external;\r\n\r\n    function isLocked() external view returns (bool);\r\n\r\n    /**\r\n     * @notice Set the threshold (denominated in reward tokens) over which rewards tokens will automatically\r\n     * be converted into the underlying asset\r\n     * @dev default returns false. Override if the Protocol offers reward token (e.g. COMP for Compound)\r\n     * @param rewardCollectThreshold minimum threshold for collecting reward token\r\n     * @return true if reward in underlying > `rewardCollectThreshold`, false otherwise\r\n     */\r\n    function shouldCollectReward(uint256 rewardCollectThreshold) external view returns (bool);\r\n\r\n    /**\r\n     * @notice not all of the funds deployed to a strategy might be available for withdrawal\r\n     * @return the amount of underlying tokens available for withdrawal from the rho strategy\r\n     */\r\n    function underlyingWithdrawable() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the deposit token contract address\r\n     * @return address of deposit token contract, or 0 if no deposit token\r\n     */\r\n    function depositToken() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IDepositUnwinder.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Deposit Token Converter Interface\r\n * @notice an adapter which unwinds the deposit token and retrieve the underlying tokens\r\n *\r\n */\r\ninterface IDepositUnwinder {\r\n    event DepositTokenAdded(address depositToken, address underlyingToken);\r\n    event DepositTokenSet(address depositToken, address underlyingToken);\r\n    event DepositTokenRemoved(address depositToken, address underlyingToken);\r\n    event DepositTokenUnwound(address depositToken, address underlyingToken, uint256 amountIn, uint256 amountOut);\r\n\r\n    /**\r\n     * @return name of protocol\r\n     */\r\n    function NAME() external view returns (string memory);\r\n\r\n    /**\r\n     * @param depositToken address of the deposit token\r\n     * @return address of the corresponding underlying token contract\r\n     */\r\n    function underlyingToken(address depositToken) external view returns (address);\r\n\r\n    /**\r\n     * @notice Admin function - add deposit/underlying pair to this contract\r\n     * @param depositTokenAddr the address of the deposit token contract\r\n     * @param underlying the address of the underlying token contract\r\n     */\r\n    function addDepositToken(address depositTokenAddr, address underlying) external;\r\n\r\n    /**\r\n     * @notice Admin function - remove deposit/underlying pair to this contract\r\n     * @param depositTokenAddr the address of the deposit token contract\r\n     */\r\n    function removeDepositToken(address depositTokenAddr) external;\r\n\r\n    /**\r\n     * @notice Admin function - change deposit/underlying pair to this contract\r\n     * @param depositToken the address of the deposit token contract\r\n     * @param underlying the address of the underlying token contract\r\n     */\r\n    function setDepositToken(address depositToken, address underlying) external;\r\n\r\n    // /**\r\n    //  * @notice Get deposit token list\r\n    //  * @return list of deposit tokens address\r\n    //  */\r\n\r\n    /**\r\n     * @notice Admin function - withdraw random token transfer to this contract\r\n     * @param token ERC20 token address to be sweeped\r\n     * @param to address for sending sweeped tokens to\r\n     */\r\n    function sweepERC20Token(address token, address to) external;\r\n\r\n    /**\r\n     * @notice Get exchange rate of a token to its underlying\r\n     * @param token address of deposit token\r\n     * @return uint256 which is the amount of underlying (after division of decimals)\r\n     */\r\n    function exchangeRate(address token) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice A method to sell all input token in this contract into output token.\r\n     * @param token address of deposit token\r\n     * @param beneficiary to receive unwound underlying tokens\r\n     * @return uint256 no. of underlying tokens retrieved\r\n     */\r\n    function unwind(address token, address beneficiary) external returns (uint256);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}